name: Daily Smoke Tests

on:
  schedule:
    # Run every day at 10:00 AM Pacific Time
    # Pacific Daylight Time (PDT): UTC-7, so 10:00 AM PDT = 5:00 PM UTC (17:00)
    # Pacific Standard Time (PST): UTC-8, so 10:00 AM PST = 6:00 PM UTC (18:00)
    # Using 17:00 UTC for PDT (March-November), will be 9:00 AM during PST (Nov-March)
    - cron: '0 17 * * *'
  workflow_dispatch:
    # Allow manual trigger with optional test selection
    inputs:
      test_type:
        description: 'Type of smoke tests to run'
        required: false
        default: 'smoke'
        type: choice
        options:
          - smoke
          - smoke_extended
          - auth

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run smoke tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Running smoke tests..."
        TEST_MARKER="${{ github.event.inputs.test_type || 'smoke' }}"
        echo "Test marker: $TEST_MARKER"
        
        # Run tests with selected marker
        pytest -m "$TEST_MARKER" --junitxml=smoke-test-results.xml --tb=short -v
      continue-on-error: true
    
    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: smoke-test-results.xml
        retention-days: 7
    
    - name: Parse test results
      if: always()
      id: test_results
      run: |
        if [ -f smoke-test-results.xml ]; then
          # Extract test summary from JUnit XML
          TESTS=$(grep -o 'tests="[0-9]*"' smoke-test-results.xml | grep -o '[0-9]*' || echo "0")
          FAILURES=$(grep -o 'failures="[0-9]*"' smoke-test-results.xml | grep -o '[0-9]*' || echo "0")
          ERRORS=$(grep -o 'errors="[0-9]*"' smoke-test-results.xml | grep -o '[0-9]*' || echo "0")
          SKIPPED=$(grep -o 'skipped="[0-9]*"' smoke-test-results.xml | grep -o '[0-9]*' || echo "0")
          TIME=$(grep -o 'time="[^"]*"' smoke-test-results.xml | grep -o '[0-9.]*' || echo "0")
          
          PASSED=$((TESTS - FAILURES - ERRORS - SKIPPED))
          
          echo "tests=$TESTS" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failures=$FAILURES" >> $GITHUB_OUTPUT
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          echo "time=$TIME" >> $GITHUB_OUTPUT
          
          # Determine overall status
          if [ $FAILURES -eq 0 ] && [ $ERRORS -eq 0 ]; then
            echo "status=‚úÖ PASSED" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå FAILED" >> $GITHUB_OUTPUT
          fi
        else
          echo "status=‚ùå NO RESULTS" >> $GITHUB_OUTPUT
          echo "tests=0" >> $GITHUB_OUTPUT
          echo "passed=0" >> $GITHUB_OUTPUT
          echo "failures=0" >> $GITHUB_OUTPUT
          echo "errors=0" >> $GITHUB_OUTPUT
          echo "skipped=0" >> $GITHUB_OUTPUT
          echo "time=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Create test summary
      if: always()
      run: |
        echo "## üö≠ Daily Smoke Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.test_results.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| ‚úÖ Passed | ${{ steps.test_results.outputs.passed }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ùå Failed | ${{ steps.test_results.outputs.failures }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ö†Ô∏è Errors | ${{ steps.test_results.outputs.errors }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚è≠Ô∏è Skipped | ${{ steps.test_results.outputs.skipped }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total** | **${{ steps.test_results.outputs.tests }}** |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚è±Ô∏è Duration | ${{ steps.test_results.outputs.time }}s |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.test_results.outputs.failures }}" != "0" ] || [ "${{ steps.test_results.outputs.errors }}" != "0" ]; then
          echo "### ‚ö†Ô∏è Issues Detected" >> $GITHUB_STEP_SUMMARY
          echo "Some smoke tests failed. Please review the test results and investigate." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚úÖ All Systems Operational" >> $GITHUB_STEP_SUMMARY
          echo "All smoke tests passed successfully. System health is good!" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Export results to TestRail (if configured)
      if: always() && vars.TESTRAIL_PROJECT_ID
      env:
        TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
        TESTRAIL_USERNAME: ${{ secrets.TESTRAIL_USERNAME }}
        TESTRAIL_PASSWORD: ${{ secrets.TESTRAIL_PASSWORD }}
        TESTRAIL_PROJECT_ID: ${{ vars.TESTRAIL_PROJECT_ID }}
        TESTRAIL_SUITE_ID: ${{ vars.TESTRAIL_SUITE_ID || '' }}
        TESTRAIL_JUNIT_FILE: smoke-test-results.xml
      run: |
        if [ -f scripts/export_test_results.py ]; then
          echo "Exporting smoke test results to TestRail..."
          python scripts/export_test_results.py
        else
          echo "TestRail export script not found, skipping..."
        fi
    
    - name: Fail workflow if tests failed
      if: always()
      run: |
        if [ "${{ steps.test_results.outputs.failures }}" != "0" ] || [ "${{ steps.test_results.outputs.errors }}" != "0" ]; then
          echo "‚ùå Smoke tests failed - system health check failed"
          exit 1
        else
          echo "‚úÖ All smoke tests passed - system is healthy"
        fi